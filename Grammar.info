-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Grammar.y
-----------------------------------------------------------------------------

state 35 contains 6 shift/reduce conflicts.
state 36 contains 6 shift/reduce conflicts.
state 37 contains 6 shift/reduce conflicts.
state 44 contains 6 shift/reduce conflicts.
state 45 contains 6 shift/reduce conflicts.
state 46 contains 6 shift/reduce conflicts.
state 49 contains 6 shift/reduce conflicts.
state 60 contains 6 shift/reduce conflicts.
state 61 contains 6 shift/reduce conflicts.
state 62 contains 6 shift/reduce conflicts.
state 63 contains 6 shift/reduce conflicts.
state 64 contains 6 shift/reduce conflicts.
state 66 contains 6 shift/reduce conflicts.
state 67 contains 6 shift/reduce conflicts.
state 68 contains 6 shift/reduce conflicts.
state 69 contains 6 shift/reduce conflicts.
state 74 contains 6 shift/reduce conflicts.
state 75 contains 6 shift/reduce conflicts.
state 76 contains 6 shift/reduce conflicts.
state 77 contains 6 shift/reduce conflicts.
state 78 contains 6 shift/reduce conflicts.
state 79 contains 6 shift/reduce conflicts.
state 86 contains 6 shift/reduce conflicts.
state 87 contains 6 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseJulio -> ExpSeq                        (0)
	ExpSeq -> Exp ';' ExpSeq                           (1)
	ExpSeq -> Exp ';'                                  (2)
	Exp -> repeat int '{' ExpSeq '}'                   (3)
	Exp -> joinH Exp Exp                               (4)
	Exp -> '(' Exp ')'                                 (5)
	Exp -> joinV Exp Exp                               (6)
	Exp -> int                                         (7)
	Exp -> var                                         (8)
	Exp -> var '=' Exp                                 (9)
	Exp -> var '<<' Exp                                (10)
	Exp -> var '>>' Exp                                (11)
	Exp -> not Exp                                     (12)
	Exp -> rotate int Exp                              (13)
	Exp -> scale int Exp                               (14)
	Exp -> reflectX Exp                                (15)
	Exp -> reflectY Exp                                (16)
	Exp -> '_' Exp                                     (17)
	Exp -> and Exp Exp                                 (18)
	Exp -> or Exp Exp                                  (19)
	Exp -> subtile int Exp Exp Exp                     (20)
	Exp -> gibb int Exp Exp Exp                        (21)
	Exp -> true                                        (22)
	Exp -> false                                       (23)
	Exp -> Exp lt Exp                                  (24)
	Exp -> Exp gt Exp                                  (25)
	Exp -> Exp eq Exp                                  (26)
	Exp -> Exp neq Exp                                 (27)
	Exp -> if Exp '{' ExpSeq '}'                       (28)
	Exp -> if Exp '{' ExpSeq '}' else '{' ExpSeq '}'   (29)
	Exp -> while Exp '{' ExpSeq '}'                    (30)
	Exp -> width Exp                                   (31)
	Exp -> height Exp                                  (32)
	Exp -> print Exp                                   (33)
	Exp -> Exp '+' Exp                                 (34)
	Exp -> Exp '-' Exp                                 (35)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	repeat         { TRepeat $$ }
	joinH          { TJoinH   $$ }
	joinV          { TJoinV   $$ }
	int            { TNumber (AlexPn x y z) $$ }
	var            { TIdentifier (AlexPn x y z) $$ }
	'='            { TEquals $$ }
	'('            { TLeftParen $$ }
	')'            { TRightParen $$ }
	'{'            { TLeftBrace $$ }
	'}'            { TRightBrace $$ }
	';'            { TSemiColon $$ }
	'<<'           { TImport $$ }
	'>>'           { TExport $$ }
	not            { TNot $$ }
	rotate         { TRotate $$ }
	scale          { TScale $$ }
	reflectX       { TReflectX $$ }
	reflectY       { TReflectY $$ }
	'_'            { TBlank $$ }
	and            { TAnd $$ }
	or             { TOr $$ }
	subtile        { TSubtile $$ }
	gibb           { TGibb $$ }
	true           { TBool (AlexPn x y z) $$ }
	false          { TBool (AlexPn x y z) $$ }
	lt             { TLessThan $$ }
	gt             { TGreaterThan $$ }
	eq             { TIsEqual $$ }
	neq            { TNotEqual $$ }
	while          { TWhile $$ }
	if             { TIf $$ }
	else           { TElse $$ }
	width          { TWidth $$ }
	height         { THeight $$ }
	print          { TPrint $$ }
	'+'            { TAdd $$ }
	'-'            { TSub $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseJulio rule  0
	ExpSeq          rules 1, 2
	Exp             rules 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseJulio -> . ExpSeq                       (rule 0)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	ExpSeq         goto state 26
	Exp            goto state 27

State 1

	ExpSeq -> . Exp ';' ExpSeq                          (rule 1)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 2

State 2

	ExpSeq -> Exp . ';' ExpSeq                          (rule 1)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	';'            shift, and enter state 57
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34


State 3

	Exp -> repeat . int '{' ExpSeq '}'                  (rule 3)

	int            shift, and enter state 56


State 4

	Exp -> joinH . Exp Exp                              (rule 4)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 55

State 5

	Exp -> joinV . Exp Exp                              (rule 6)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 54

State 6

	Exp -> int .                                        (rule 7)

	repeat         reduce using rule 7
	joinH          reduce using rule 7
	joinV          reduce using rule 7
	int            reduce using rule 7
	var            reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'{'            reduce using rule 7
	';'            reduce using rule 7
	not            reduce using rule 7
	rotate         reduce using rule 7
	scale          reduce using rule 7
	reflectX       reduce using rule 7
	reflectY       reduce using rule 7
	'_'            reduce using rule 7
	and            reduce using rule 7
	or             reduce using rule 7
	subtile        reduce using rule 7
	gibb           reduce using rule 7
	true           reduce using rule 7
	false          reduce using rule 7
	lt             reduce using rule 7
	gt             reduce using rule 7
	eq             reduce using rule 7
	neq            reduce using rule 7
	while          reduce using rule 7
	if             reduce using rule 7
	width          reduce using rule 7
	height         reduce using rule 7
	print          reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7


State 7

	Exp -> var .                                        (rule 8)
	Exp -> var . '=' Exp                                (rule 9)
	Exp -> var . '<<' Exp                               (rule 10)
	Exp -> var . '>>' Exp                               (rule 11)

	repeat         reduce using rule 8
	joinH          reduce using rule 8
	joinV          reduce using rule 8
	int            reduce using rule 8
	var            reduce using rule 8
	'='            shift, and enter state 51
	'('            reduce using rule 8
	')'            reduce using rule 8
	'{'            reduce using rule 8
	';'            reduce using rule 8
	'<<'           shift, and enter state 52
	'>>'           shift, and enter state 53
	not            reduce using rule 8
	rotate         reduce using rule 8
	scale          reduce using rule 8
	reflectX       reduce using rule 8
	reflectY       reduce using rule 8
	'_'            reduce using rule 8
	and            reduce using rule 8
	or             reduce using rule 8
	subtile        reduce using rule 8
	gibb           reduce using rule 8
	true           reduce using rule 8
	false          reduce using rule 8
	lt             reduce using rule 8
	gt             reduce using rule 8
	eq             reduce using rule 8
	neq            reduce using rule 8
	while          reduce using rule 8
	if             reduce using rule 8
	width          reduce using rule 8
	height         reduce using rule 8
	print          reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8


State 8

	Exp -> '(' . Exp ')'                                (rule 5)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 50

State 9

	Exp -> not . Exp                                    (rule 12)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 49

State 10

	Exp -> rotate . int Exp                             (rule 13)

	int            shift, and enter state 48


State 11

	Exp -> scale . int Exp                              (rule 14)

	int            shift, and enter state 47


State 12

	Exp -> reflectX . Exp                               (rule 15)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 46

State 13

	Exp -> reflectY . Exp                               (rule 16)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 45

State 14

	Exp -> '_' . Exp                                    (rule 17)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 44

State 15

	Exp -> and . Exp Exp                                (rule 18)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 43

State 16

	Exp -> or . Exp Exp                                 (rule 19)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 42

State 17

	Exp -> subtile . int Exp Exp Exp                    (rule 20)

	int            shift, and enter state 41


State 18

	Exp -> gibb . int Exp Exp Exp                       (rule 21)

	int            shift, and enter state 40


State 19

	Exp -> true .                                       (rule 22)

	repeat         reduce using rule 22
	joinH          reduce using rule 22
	joinV          reduce using rule 22
	int            reduce using rule 22
	var            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'{'            reduce using rule 22
	';'            reduce using rule 22
	not            reduce using rule 22
	rotate         reduce using rule 22
	scale          reduce using rule 22
	reflectX       reduce using rule 22
	reflectY       reduce using rule 22
	'_'            reduce using rule 22
	and            reduce using rule 22
	or             reduce using rule 22
	subtile        reduce using rule 22
	gibb           reduce using rule 22
	true           reduce using rule 22
	false          reduce using rule 22
	lt             reduce using rule 22
	gt             reduce using rule 22
	eq             reduce using rule 22
	neq            reduce using rule 22
	while          reduce using rule 22
	if             reduce using rule 22
	width          reduce using rule 22
	height         reduce using rule 22
	print          reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22


State 20

	Exp -> false .                                      (rule 23)

	repeat         reduce using rule 23
	joinH          reduce using rule 23
	joinV          reduce using rule 23
	int            reduce using rule 23
	var            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'{'            reduce using rule 23
	';'            reduce using rule 23
	not            reduce using rule 23
	rotate         reduce using rule 23
	scale          reduce using rule 23
	reflectX       reduce using rule 23
	reflectY       reduce using rule 23
	'_'            reduce using rule 23
	and            reduce using rule 23
	or             reduce using rule 23
	subtile        reduce using rule 23
	gibb           reduce using rule 23
	true           reduce using rule 23
	false          reduce using rule 23
	lt             reduce using rule 23
	gt             reduce using rule 23
	eq             reduce using rule 23
	neq            reduce using rule 23
	while          reduce using rule 23
	if             reduce using rule 23
	width          reduce using rule 23
	height         reduce using rule 23
	print          reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23


State 21

	Exp -> while . Exp '{' ExpSeq '}'                   (rule 30)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 39

State 22

	Exp -> if . Exp '{' ExpSeq '}'                      (rule 28)
	Exp -> if . Exp '{' ExpSeq '}' else '{' ExpSeq '}'    (rule 29)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 38

State 23

	Exp -> width . Exp                                  (rule 31)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 37

State 24

	Exp -> height . Exp                                 (rule 32)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 36

State 25

	Exp -> print . Exp                                  (rule 33)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 35

State 26

	%start_parseJulio -> ExpSeq .                       (rule 0)

	%eof           accept


State 27

	ExpSeq -> Exp . ';' ExpSeq                          (rule 1)
	ExpSeq -> Exp . ';'                                 (rule 2)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	';'            shift, and enter state 28
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34


State 28

	ExpSeq -> Exp ';' . ExpSeq                          (rule 1)
	ExpSeq -> Exp ';' .                                 (rule 2)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	'}'            reduce using rule 2
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25
	%eof           reduce using rule 2

	ExpSeq         goto state 58
	Exp            goto state 27

State 29

	Exp -> Exp lt . Exp                                 (rule 24)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 79

State 30

	Exp -> Exp gt . Exp                                 (rule 25)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 78

State 31

	Exp -> Exp eq . Exp                                 (rule 26)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 77

State 32

	Exp -> Exp neq . Exp                                (rule 27)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 76

State 33

	Exp -> Exp '+' . Exp                                (rule 34)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 75

State 34

	Exp -> Exp '-' . Exp                                (rule 35)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 74

State 35

	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> print Exp .                                  (rule 33)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 33
	joinH          reduce using rule 33
	joinV          reduce using rule 33
	int            reduce using rule 33
	var            reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'{'            reduce using rule 33
	';'            reduce using rule 33
	not            reduce using rule 33
	rotate         reduce using rule 33
	scale          reduce using rule 33
	reflectX       reduce using rule 33
	reflectY       reduce using rule 33
	'_'            reduce using rule 33
	and            reduce using rule 33
	or             reduce using rule 33
	subtile        reduce using rule 33
	gibb           reduce using rule 33
	true           reduce using rule 33
	false          reduce using rule 33
	lt             shift, and enter state 29
			(reduce using rule 33)

	gt             shift, and enter state 30
			(reduce using rule 33)

	eq             shift, and enter state 31
			(reduce using rule 33)

	neq            shift, and enter state 32
			(reduce using rule 33)

	while          reduce using rule 33
	if             reduce using rule 33
	width          reduce using rule 33
	height         reduce using rule 33
	print          reduce using rule 33
	'+'            shift, and enter state 33
			(reduce using rule 33)

	'-'            shift, and enter state 34
			(reduce using rule 33)



State 36

	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> height Exp .                                 (rule 32)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 32
	joinH          reduce using rule 32
	joinV          reduce using rule 32
	int            reduce using rule 32
	var            reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'{'            reduce using rule 32
	';'            reduce using rule 32
	not            reduce using rule 32
	rotate         reduce using rule 32
	scale          reduce using rule 32
	reflectX       reduce using rule 32
	reflectY       reduce using rule 32
	'_'            reduce using rule 32
	and            reduce using rule 32
	or             reduce using rule 32
	subtile        reduce using rule 32
	gibb           reduce using rule 32
	true           reduce using rule 32
	false          reduce using rule 32
	lt             shift, and enter state 29
			(reduce using rule 32)

	gt             shift, and enter state 30
			(reduce using rule 32)

	eq             shift, and enter state 31
			(reduce using rule 32)

	neq            shift, and enter state 32
			(reduce using rule 32)

	while          reduce using rule 32
	if             reduce using rule 32
	width          reduce using rule 32
	height         reduce using rule 32
	print          reduce using rule 32
	'+'            shift, and enter state 33
			(reduce using rule 32)

	'-'            shift, and enter state 34
			(reduce using rule 32)



State 37

	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> width Exp .                                  (rule 31)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 31
	joinH          reduce using rule 31
	joinV          reduce using rule 31
	int            reduce using rule 31
	var            reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	'{'            reduce using rule 31
	';'            reduce using rule 31
	not            reduce using rule 31
	rotate         reduce using rule 31
	scale          reduce using rule 31
	reflectX       reduce using rule 31
	reflectY       reduce using rule 31
	'_'            reduce using rule 31
	and            reduce using rule 31
	or             reduce using rule 31
	subtile        reduce using rule 31
	gibb           reduce using rule 31
	true           reduce using rule 31
	false          reduce using rule 31
	lt             shift, and enter state 29
			(reduce using rule 31)

	gt             shift, and enter state 30
			(reduce using rule 31)

	eq             shift, and enter state 31
			(reduce using rule 31)

	neq            shift, and enter state 32
			(reduce using rule 31)

	while          reduce using rule 31
	if             reduce using rule 31
	width          reduce using rule 31
	height         reduce using rule 31
	print          reduce using rule 31
	'+'            shift, and enter state 33
			(reduce using rule 31)

	'-'            shift, and enter state 34
			(reduce using rule 31)



State 38

	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> if Exp . '{' ExpSeq '}'                      (rule 28)
	Exp -> if Exp . '{' ExpSeq '}' else '{' ExpSeq '}'    (rule 29)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	'{'            shift, and enter state 73
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34


State 39

	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> while Exp . '{' ExpSeq '}'                   (rule 30)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	'{'            shift, and enter state 72
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34


State 40

	Exp -> gibb int . Exp Exp Exp                       (rule 21)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 71

State 41

	Exp -> subtile int . Exp Exp Exp                    (rule 20)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 70

State 42

	Exp -> or Exp . Exp                                 (rule 19)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34

	Exp            goto state 69

State 43

	Exp -> and Exp . Exp                                (rule 18)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34

	Exp            goto state 68

State 44

	Exp -> '_' Exp .                                    (rule 17)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 17
	joinH          reduce using rule 17
	joinV          reduce using rule 17
	int            reduce using rule 17
	var            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'{'            reduce using rule 17
	';'            reduce using rule 17
	not            reduce using rule 17
	rotate         reduce using rule 17
	scale          reduce using rule 17
	reflectX       reduce using rule 17
	reflectY       reduce using rule 17
	'_'            reduce using rule 17
	and            reduce using rule 17
	or             reduce using rule 17
	subtile        reduce using rule 17
	gibb           reduce using rule 17
	true           reduce using rule 17
	false          reduce using rule 17
	lt             shift, and enter state 29
			(reduce using rule 17)

	gt             shift, and enter state 30
			(reduce using rule 17)

	eq             shift, and enter state 31
			(reduce using rule 17)

	neq            shift, and enter state 32
			(reduce using rule 17)

	while          reduce using rule 17
	if             reduce using rule 17
	width          reduce using rule 17
	height         reduce using rule 17
	print          reduce using rule 17
	'+'            shift, and enter state 33
			(reduce using rule 17)

	'-'            shift, and enter state 34
			(reduce using rule 17)



State 45

	Exp -> reflectY Exp .                               (rule 16)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 16
	joinH          reduce using rule 16
	joinV          reduce using rule 16
	int            reduce using rule 16
	var            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'{'            reduce using rule 16
	';'            reduce using rule 16
	not            reduce using rule 16
	rotate         reduce using rule 16
	scale          reduce using rule 16
	reflectX       reduce using rule 16
	reflectY       reduce using rule 16
	'_'            reduce using rule 16
	and            reduce using rule 16
	or             reduce using rule 16
	subtile        reduce using rule 16
	gibb           reduce using rule 16
	true           reduce using rule 16
	false          reduce using rule 16
	lt             shift, and enter state 29
			(reduce using rule 16)

	gt             shift, and enter state 30
			(reduce using rule 16)

	eq             shift, and enter state 31
			(reduce using rule 16)

	neq            shift, and enter state 32
			(reduce using rule 16)

	while          reduce using rule 16
	if             reduce using rule 16
	width          reduce using rule 16
	height         reduce using rule 16
	print          reduce using rule 16
	'+'            shift, and enter state 33
			(reduce using rule 16)

	'-'            shift, and enter state 34
			(reduce using rule 16)



State 46

	Exp -> reflectX Exp .                               (rule 15)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 15
	joinH          reduce using rule 15
	joinV          reduce using rule 15
	int            reduce using rule 15
	var            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'{'            reduce using rule 15
	';'            reduce using rule 15
	not            reduce using rule 15
	rotate         reduce using rule 15
	scale          reduce using rule 15
	reflectX       reduce using rule 15
	reflectY       reduce using rule 15
	'_'            reduce using rule 15
	and            reduce using rule 15
	or             reduce using rule 15
	subtile        reduce using rule 15
	gibb           reduce using rule 15
	true           reduce using rule 15
	false          reduce using rule 15
	lt             shift, and enter state 29
			(reduce using rule 15)

	gt             shift, and enter state 30
			(reduce using rule 15)

	eq             shift, and enter state 31
			(reduce using rule 15)

	neq            shift, and enter state 32
			(reduce using rule 15)

	while          reduce using rule 15
	if             reduce using rule 15
	width          reduce using rule 15
	height         reduce using rule 15
	print          reduce using rule 15
	'+'            shift, and enter state 33
			(reduce using rule 15)

	'-'            shift, and enter state 34
			(reduce using rule 15)



State 47

	Exp -> scale int . Exp                              (rule 14)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 67

State 48

	Exp -> rotate int . Exp                             (rule 13)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 66

State 49

	Exp -> not Exp .                                    (rule 12)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 12
	joinH          reduce using rule 12
	joinV          reduce using rule 12
	int            reduce using rule 12
	var            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'{'            reduce using rule 12
	';'            reduce using rule 12
	not            reduce using rule 12
	rotate         reduce using rule 12
	scale          reduce using rule 12
	reflectX       reduce using rule 12
	reflectY       reduce using rule 12
	'_'            reduce using rule 12
	and            reduce using rule 12
	or             reduce using rule 12
	subtile        reduce using rule 12
	gibb           reduce using rule 12
	true           reduce using rule 12
	false          reduce using rule 12
	lt             shift, and enter state 29
			(reduce using rule 12)

	gt             shift, and enter state 30
			(reduce using rule 12)

	eq             shift, and enter state 31
			(reduce using rule 12)

	neq            shift, and enter state 32
			(reduce using rule 12)

	while          reduce using rule 12
	if             reduce using rule 12
	width          reduce using rule 12
	height         reduce using rule 12
	print          reduce using rule 12
	'+'            shift, and enter state 33
			(reduce using rule 12)

	'-'            shift, and enter state 34
			(reduce using rule 12)



State 50

	Exp -> '(' Exp . ')'                                (rule 5)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	')'            shift, and enter state 65
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34


State 51

	Exp -> var '=' . Exp                                (rule 9)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 64

State 52

	Exp -> var '<<' . Exp                               (rule 10)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 63

State 53

	Exp -> var '>>' . Exp                               (rule 11)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	Exp            goto state 62

State 54

	Exp -> joinV Exp . Exp                              (rule 6)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34

	Exp            goto state 61

State 55

	Exp -> joinH Exp . Exp                              (rule 4)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34

	Exp            goto state 60

State 56

	Exp -> repeat int . '{' ExpSeq '}'                  (rule 3)

	'{'            shift, and enter state 59


State 57

	ExpSeq -> Exp ';' . ExpSeq                          (rule 1)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	ExpSeq         goto state 58
	Exp            goto state 27

State 58

	ExpSeq -> Exp ';' ExpSeq .                          (rule 1)

	'}'            reduce using rule 1
	%eof           reduce using rule 1


State 59

	Exp -> repeat int '{' . ExpSeq '}'                  (rule 3)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	ExpSeq         goto state 84
	Exp            goto state 27

State 60

	Exp -> joinH Exp Exp .                              (rule 4)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 4
	joinH          reduce using rule 4
	joinV          reduce using rule 4
	int            reduce using rule 4
	var            reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	'{'            reduce using rule 4
	';'            reduce using rule 4
	not            reduce using rule 4
	rotate         reduce using rule 4
	scale          reduce using rule 4
	reflectX       reduce using rule 4
	reflectY       reduce using rule 4
	'_'            reduce using rule 4
	and            reduce using rule 4
	or             reduce using rule 4
	subtile        reduce using rule 4
	gibb           reduce using rule 4
	true           reduce using rule 4
	false          reduce using rule 4
	lt             shift, and enter state 29
			(reduce using rule 4)

	gt             shift, and enter state 30
			(reduce using rule 4)

	eq             shift, and enter state 31
			(reduce using rule 4)

	neq            shift, and enter state 32
			(reduce using rule 4)

	while          reduce using rule 4
	if             reduce using rule 4
	width          reduce using rule 4
	height         reduce using rule 4
	print          reduce using rule 4
	'+'            shift, and enter state 33
			(reduce using rule 4)

	'-'            shift, and enter state 34
			(reduce using rule 4)



State 61

	Exp -> joinV Exp Exp .                              (rule 6)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 6
	joinH          reduce using rule 6
	joinV          reduce using rule 6
	int            reduce using rule 6
	var            reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	'{'            reduce using rule 6
	';'            reduce using rule 6
	not            reduce using rule 6
	rotate         reduce using rule 6
	scale          reduce using rule 6
	reflectX       reduce using rule 6
	reflectY       reduce using rule 6
	'_'            reduce using rule 6
	and            reduce using rule 6
	or             reduce using rule 6
	subtile        reduce using rule 6
	gibb           reduce using rule 6
	true           reduce using rule 6
	false          reduce using rule 6
	lt             shift, and enter state 29
			(reduce using rule 6)

	gt             shift, and enter state 30
			(reduce using rule 6)

	eq             shift, and enter state 31
			(reduce using rule 6)

	neq            shift, and enter state 32
			(reduce using rule 6)

	while          reduce using rule 6
	if             reduce using rule 6
	width          reduce using rule 6
	height         reduce using rule 6
	print          reduce using rule 6
	'+'            shift, and enter state 33
			(reduce using rule 6)

	'-'            shift, and enter state 34
			(reduce using rule 6)



State 62

	Exp -> var '>>' Exp .                               (rule 11)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 11
	joinH          reduce using rule 11
	joinV          reduce using rule 11
	int            reduce using rule 11
	var            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'{'            reduce using rule 11
	';'            reduce using rule 11
	not            reduce using rule 11
	rotate         reduce using rule 11
	scale          reduce using rule 11
	reflectX       reduce using rule 11
	reflectY       reduce using rule 11
	'_'            reduce using rule 11
	and            reduce using rule 11
	or             reduce using rule 11
	subtile        reduce using rule 11
	gibb           reduce using rule 11
	true           reduce using rule 11
	false          reduce using rule 11
	lt             shift, and enter state 29
			(reduce using rule 11)

	gt             shift, and enter state 30
			(reduce using rule 11)

	eq             shift, and enter state 31
			(reduce using rule 11)

	neq            shift, and enter state 32
			(reduce using rule 11)

	while          reduce using rule 11
	if             reduce using rule 11
	width          reduce using rule 11
	height         reduce using rule 11
	print          reduce using rule 11
	'+'            shift, and enter state 33
			(reduce using rule 11)

	'-'            shift, and enter state 34
			(reduce using rule 11)



State 63

	Exp -> var '<<' Exp .                               (rule 10)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 10
	joinH          reduce using rule 10
	joinV          reduce using rule 10
	int            reduce using rule 10
	var            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'{'            reduce using rule 10
	';'            reduce using rule 10
	not            reduce using rule 10
	rotate         reduce using rule 10
	scale          reduce using rule 10
	reflectX       reduce using rule 10
	reflectY       reduce using rule 10
	'_'            reduce using rule 10
	and            reduce using rule 10
	or             reduce using rule 10
	subtile        reduce using rule 10
	gibb           reduce using rule 10
	true           reduce using rule 10
	false          reduce using rule 10
	lt             shift, and enter state 29
			(reduce using rule 10)

	gt             shift, and enter state 30
			(reduce using rule 10)

	eq             shift, and enter state 31
			(reduce using rule 10)

	neq            shift, and enter state 32
			(reduce using rule 10)

	while          reduce using rule 10
	if             reduce using rule 10
	width          reduce using rule 10
	height         reduce using rule 10
	print          reduce using rule 10
	'+'            shift, and enter state 33
			(reduce using rule 10)

	'-'            shift, and enter state 34
			(reduce using rule 10)



State 64

	Exp -> var '=' Exp .                                (rule 9)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 9
	joinH          reduce using rule 9
	joinV          reduce using rule 9
	int            reduce using rule 9
	var            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'{'            reduce using rule 9
	';'            reduce using rule 9
	not            reduce using rule 9
	rotate         reduce using rule 9
	scale          reduce using rule 9
	reflectX       reduce using rule 9
	reflectY       reduce using rule 9
	'_'            reduce using rule 9
	and            reduce using rule 9
	or             reduce using rule 9
	subtile        reduce using rule 9
	gibb           reduce using rule 9
	true           reduce using rule 9
	false          reduce using rule 9
	lt             shift, and enter state 29
			(reduce using rule 9)

	gt             shift, and enter state 30
			(reduce using rule 9)

	eq             shift, and enter state 31
			(reduce using rule 9)

	neq            shift, and enter state 32
			(reduce using rule 9)

	while          reduce using rule 9
	if             reduce using rule 9
	width          reduce using rule 9
	height         reduce using rule 9
	print          reduce using rule 9
	'+'            shift, and enter state 33
			(reduce using rule 9)

	'-'            shift, and enter state 34
			(reduce using rule 9)



State 65

	Exp -> '(' Exp ')' .                                (rule 5)

	repeat         reduce using rule 5
	joinH          reduce using rule 5
	joinV          reduce using rule 5
	int            reduce using rule 5
	var            reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'{'            reduce using rule 5
	';'            reduce using rule 5
	not            reduce using rule 5
	rotate         reduce using rule 5
	scale          reduce using rule 5
	reflectX       reduce using rule 5
	reflectY       reduce using rule 5
	'_'            reduce using rule 5
	and            reduce using rule 5
	or             reduce using rule 5
	subtile        reduce using rule 5
	gibb           reduce using rule 5
	true           reduce using rule 5
	false          reduce using rule 5
	lt             reduce using rule 5
	gt             reduce using rule 5
	eq             reduce using rule 5
	neq            reduce using rule 5
	while          reduce using rule 5
	if             reduce using rule 5
	width          reduce using rule 5
	height         reduce using rule 5
	print          reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5


State 66

	Exp -> rotate int Exp .                             (rule 13)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 13
	joinH          reduce using rule 13
	joinV          reduce using rule 13
	int            reduce using rule 13
	var            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'{'            reduce using rule 13
	';'            reduce using rule 13
	not            reduce using rule 13
	rotate         reduce using rule 13
	scale          reduce using rule 13
	reflectX       reduce using rule 13
	reflectY       reduce using rule 13
	'_'            reduce using rule 13
	and            reduce using rule 13
	or             reduce using rule 13
	subtile        reduce using rule 13
	gibb           reduce using rule 13
	true           reduce using rule 13
	false          reduce using rule 13
	lt             shift, and enter state 29
			(reduce using rule 13)

	gt             shift, and enter state 30
			(reduce using rule 13)

	eq             shift, and enter state 31
			(reduce using rule 13)

	neq            shift, and enter state 32
			(reduce using rule 13)

	while          reduce using rule 13
	if             reduce using rule 13
	width          reduce using rule 13
	height         reduce using rule 13
	print          reduce using rule 13
	'+'            shift, and enter state 33
			(reduce using rule 13)

	'-'            shift, and enter state 34
			(reduce using rule 13)



State 67

	Exp -> scale int Exp .                              (rule 14)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 14
	joinH          reduce using rule 14
	joinV          reduce using rule 14
	int            reduce using rule 14
	var            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'{'            reduce using rule 14
	';'            reduce using rule 14
	not            reduce using rule 14
	rotate         reduce using rule 14
	scale          reduce using rule 14
	reflectX       reduce using rule 14
	reflectY       reduce using rule 14
	'_'            reduce using rule 14
	and            reduce using rule 14
	or             reduce using rule 14
	subtile        reduce using rule 14
	gibb           reduce using rule 14
	true           reduce using rule 14
	false          reduce using rule 14
	lt             shift, and enter state 29
			(reduce using rule 14)

	gt             shift, and enter state 30
			(reduce using rule 14)

	eq             shift, and enter state 31
			(reduce using rule 14)

	neq            shift, and enter state 32
			(reduce using rule 14)

	while          reduce using rule 14
	if             reduce using rule 14
	width          reduce using rule 14
	height         reduce using rule 14
	print          reduce using rule 14
	'+'            shift, and enter state 33
			(reduce using rule 14)

	'-'            shift, and enter state 34
			(reduce using rule 14)



State 68

	Exp -> and Exp Exp .                                (rule 18)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 18
	joinH          reduce using rule 18
	joinV          reduce using rule 18
	int            reduce using rule 18
	var            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'{'            reduce using rule 18
	';'            reduce using rule 18
	not            reduce using rule 18
	rotate         reduce using rule 18
	scale          reduce using rule 18
	reflectX       reduce using rule 18
	reflectY       reduce using rule 18
	'_'            reduce using rule 18
	and            reduce using rule 18
	or             reduce using rule 18
	subtile        reduce using rule 18
	gibb           reduce using rule 18
	true           reduce using rule 18
	false          reduce using rule 18
	lt             shift, and enter state 29
			(reduce using rule 18)

	gt             shift, and enter state 30
			(reduce using rule 18)

	eq             shift, and enter state 31
			(reduce using rule 18)

	neq            shift, and enter state 32
			(reduce using rule 18)

	while          reduce using rule 18
	if             reduce using rule 18
	width          reduce using rule 18
	height         reduce using rule 18
	print          reduce using rule 18
	'+'            shift, and enter state 33
			(reduce using rule 18)

	'-'            shift, and enter state 34
			(reduce using rule 18)



State 69

	Exp -> or Exp Exp .                                 (rule 19)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 19
	joinH          reduce using rule 19
	joinV          reduce using rule 19
	int            reduce using rule 19
	var            reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'{'            reduce using rule 19
	';'            reduce using rule 19
	not            reduce using rule 19
	rotate         reduce using rule 19
	scale          reduce using rule 19
	reflectX       reduce using rule 19
	reflectY       reduce using rule 19
	'_'            reduce using rule 19
	and            reduce using rule 19
	or             reduce using rule 19
	subtile        reduce using rule 19
	gibb           reduce using rule 19
	true           reduce using rule 19
	false          reduce using rule 19
	lt             shift, and enter state 29
			(reduce using rule 19)

	gt             shift, and enter state 30
			(reduce using rule 19)

	eq             shift, and enter state 31
			(reduce using rule 19)

	neq            shift, and enter state 32
			(reduce using rule 19)

	while          reduce using rule 19
	if             reduce using rule 19
	width          reduce using rule 19
	height         reduce using rule 19
	print          reduce using rule 19
	'+'            shift, and enter state 33
			(reduce using rule 19)

	'-'            shift, and enter state 34
			(reduce using rule 19)



State 70

	Exp -> subtile int Exp . Exp Exp                    (rule 20)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34

	Exp            goto state 83

State 71

	Exp -> gibb int Exp . Exp Exp                       (rule 21)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34

	Exp            goto state 82

State 72

	Exp -> while Exp '{' . ExpSeq '}'                   (rule 30)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	ExpSeq         goto state 81
	Exp            goto state 27

State 73

	Exp -> if Exp '{' . ExpSeq '}'                      (rule 28)
	Exp -> if Exp '{' . ExpSeq '}' else '{' ExpSeq '}'    (rule 29)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	ExpSeq         goto state 80
	Exp            goto state 27

State 74

	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)
	Exp -> Exp '-' Exp .                                (rule 35)

	repeat         reduce using rule 35
	joinH          reduce using rule 35
	joinV          reduce using rule 35
	int            reduce using rule 35
	var            reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'{'            reduce using rule 35
	';'            reduce using rule 35
	not            reduce using rule 35
	rotate         reduce using rule 35
	scale          reduce using rule 35
	reflectX       reduce using rule 35
	reflectY       reduce using rule 35
	'_'            reduce using rule 35
	and            reduce using rule 35
	or             reduce using rule 35
	subtile        reduce using rule 35
	gibb           reduce using rule 35
	true           reduce using rule 35
	false          reduce using rule 35
	lt             shift, and enter state 29
			(reduce using rule 35)

	gt             shift, and enter state 30
			(reduce using rule 35)

	eq             shift, and enter state 31
			(reduce using rule 35)

	neq            shift, and enter state 32
			(reduce using rule 35)

	while          reduce using rule 35
	if             reduce using rule 35
	width          reduce using rule 35
	height         reduce using rule 35
	print          reduce using rule 35
	'+'            shift, and enter state 33
			(reduce using rule 35)

	'-'            shift, and enter state 34
			(reduce using rule 35)



State 75

	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp '+' Exp .                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 34
	joinH          reduce using rule 34
	joinV          reduce using rule 34
	int            reduce using rule 34
	var            reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'{'            reduce using rule 34
	';'            reduce using rule 34
	not            reduce using rule 34
	rotate         reduce using rule 34
	scale          reduce using rule 34
	reflectX       reduce using rule 34
	reflectY       reduce using rule 34
	'_'            reduce using rule 34
	and            reduce using rule 34
	or             reduce using rule 34
	subtile        reduce using rule 34
	gibb           reduce using rule 34
	true           reduce using rule 34
	false          reduce using rule 34
	lt             shift, and enter state 29
			(reduce using rule 34)

	gt             shift, and enter state 30
			(reduce using rule 34)

	eq             shift, and enter state 31
			(reduce using rule 34)

	neq            shift, and enter state 32
			(reduce using rule 34)

	while          reduce using rule 34
	if             reduce using rule 34
	width          reduce using rule 34
	height         reduce using rule 34
	print          reduce using rule 34
	'+'            shift, and enter state 33
			(reduce using rule 34)

	'-'            shift, and enter state 34
			(reduce using rule 34)



State 76

	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp neq Exp .                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 27
	joinH          reduce using rule 27
	joinV          reduce using rule 27
	int            reduce using rule 27
	var            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'{'            reduce using rule 27
	';'            reduce using rule 27
	not            reduce using rule 27
	rotate         reduce using rule 27
	scale          reduce using rule 27
	reflectX       reduce using rule 27
	reflectY       reduce using rule 27
	'_'            reduce using rule 27
	and            reduce using rule 27
	or             reduce using rule 27
	subtile        reduce using rule 27
	gibb           reduce using rule 27
	true           reduce using rule 27
	false          reduce using rule 27
	lt             shift, and enter state 29
			(reduce using rule 27)

	gt             shift, and enter state 30
			(reduce using rule 27)

	eq             shift, and enter state 31
			(reduce using rule 27)

	neq            shift, and enter state 32
			(reduce using rule 27)

	while          reduce using rule 27
	if             reduce using rule 27
	width          reduce using rule 27
	height         reduce using rule 27
	print          reduce using rule 27
	'+'            shift, and enter state 33
			(reduce using rule 27)

	'-'            shift, and enter state 34
			(reduce using rule 27)



State 77

	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp eq Exp .                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 26
	joinH          reduce using rule 26
	joinV          reduce using rule 26
	int            reduce using rule 26
	var            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'{'            reduce using rule 26
	';'            reduce using rule 26
	not            reduce using rule 26
	rotate         reduce using rule 26
	scale          reduce using rule 26
	reflectX       reduce using rule 26
	reflectY       reduce using rule 26
	'_'            reduce using rule 26
	and            reduce using rule 26
	or             reduce using rule 26
	subtile        reduce using rule 26
	gibb           reduce using rule 26
	true           reduce using rule 26
	false          reduce using rule 26
	lt             shift, and enter state 29
			(reduce using rule 26)

	gt             shift, and enter state 30
			(reduce using rule 26)

	eq             shift, and enter state 31
			(reduce using rule 26)

	neq            shift, and enter state 32
			(reduce using rule 26)

	while          reduce using rule 26
	if             reduce using rule 26
	width          reduce using rule 26
	height         reduce using rule 26
	print          reduce using rule 26
	'+'            shift, and enter state 33
			(reduce using rule 26)

	'-'            shift, and enter state 34
			(reduce using rule 26)



State 78

	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp gt Exp .                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 25
	joinH          reduce using rule 25
	joinV          reduce using rule 25
	int            reduce using rule 25
	var            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'{'            reduce using rule 25
	';'            reduce using rule 25
	not            reduce using rule 25
	rotate         reduce using rule 25
	scale          reduce using rule 25
	reflectX       reduce using rule 25
	reflectY       reduce using rule 25
	'_'            reduce using rule 25
	and            reduce using rule 25
	or             reduce using rule 25
	subtile        reduce using rule 25
	gibb           reduce using rule 25
	true           reduce using rule 25
	false          reduce using rule 25
	lt             shift, and enter state 29
			(reduce using rule 25)

	gt             shift, and enter state 30
			(reduce using rule 25)

	eq             shift, and enter state 31
			(reduce using rule 25)

	neq            shift, and enter state 32
			(reduce using rule 25)

	while          reduce using rule 25
	if             reduce using rule 25
	width          reduce using rule 25
	height         reduce using rule 25
	print          reduce using rule 25
	'+'            shift, and enter state 33
			(reduce using rule 25)

	'-'            shift, and enter state 34
			(reduce using rule 25)



State 79

	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp lt Exp .                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 24
	joinH          reduce using rule 24
	joinV          reduce using rule 24
	int            reduce using rule 24
	var            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'{'            reduce using rule 24
	';'            reduce using rule 24
	not            reduce using rule 24
	rotate         reduce using rule 24
	scale          reduce using rule 24
	reflectX       reduce using rule 24
	reflectY       reduce using rule 24
	'_'            reduce using rule 24
	and            reduce using rule 24
	or             reduce using rule 24
	subtile        reduce using rule 24
	gibb           reduce using rule 24
	true           reduce using rule 24
	false          reduce using rule 24
	lt             shift, and enter state 29
			(reduce using rule 24)

	gt             shift, and enter state 30
			(reduce using rule 24)

	eq             shift, and enter state 31
			(reduce using rule 24)

	neq            shift, and enter state 32
			(reduce using rule 24)

	while          reduce using rule 24
	if             reduce using rule 24
	width          reduce using rule 24
	height         reduce using rule 24
	print          reduce using rule 24
	'+'            shift, and enter state 33
			(reduce using rule 24)

	'-'            shift, and enter state 34
			(reduce using rule 24)



State 80

	Exp -> if Exp '{' ExpSeq . '}'                      (rule 28)
	Exp -> if Exp '{' ExpSeq . '}' else '{' ExpSeq '}'    (rule 29)

	'}'            shift, and enter state 89


State 81

	Exp -> while Exp '{' ExpSeq . '}'                   (rule 30)

	'}'            shift, and enter state 88


State 82

	Exp -> gibb int Exp Exp . Exp                       (rule 21)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34

	Exp            goto state 87

State 83

	Exp -> subtile int Exp Exp . Exp                    (rule 20)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	lt             shift, and enter state 29
	gt             shift, and enter state 30
	eq             shift, and enter state 31
	neq            shift, and enter state 32
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34

	Exp            goto state 86

State 84

	Exp -> repeat int '{' ExpSeq . '}'                  (rule 3)

	'}'            shift, and enter state 85


State 85

	Exp -> repeat int '{' ExpSeq '}' .                  (rule 3)

	repeat         reduce using rule 3
	joinH          reduce using rule 3
	joinV          reduce using rule 3
	int            reduce using rule 3
	var            reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	'{'            reduce using rule 3
	';'            reduce using rule 3
	not            reduce using rule 3
	rotate         reduce using rule 3
	scale          reduce using rule 3
	reflectX       reduce using rule 3
	reflectY       reduce using rule 3
	'_'            reduce using rule 3
	and            reduce using rule 3
	or             reduce using rule 3
	subtile        reduce using rule 3
	gibb           reduce using rule 3
	true           reduce using rule 3
	false          reduce using rule 3
	lt             reduce using rule 3
	gt             reduce using rule 3
	eq             reduce using rule 3
	neq            reduce using rule 3
	while          reduce using rule 3
	if             reduce using rule 3
	width          reduce using rule 3
	height         reduce using rule 3
	print          reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3


State 86

	Exp -> subtile int Exp Exp Exp .                    (rule 20)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 20
	joinH          reduce using rule 20
	joinV          reduce using rule 20
	int            reduce using rule 20
	var            reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'{'            reduce using rule 20
	';'            reduce using rule 20
	not            reduce using rule 20
	rotate         reduce using rule 20
	scale          reduce using rule 20
	reflectX       reduce using rule 20
	reflectY       reduce using rule 20
	'_'            reduce using rule 20
	and            reduce using rule 20
	or             reduce using rule 20
	subtile        reduce using rule 20
	gibb           reduce using rule 20
	true           reduce using rule 20
	false          reduce using rule 20
	lt             shift, and enter state 29
			(reduce using rule 20)

	gt             shift, and enter state 30
			(reduce using rule 20)

	eq             shift, and enter state 31
			(reduce using rule 20)

	neq            shift, and enter state 32
			(reduce using rule 20)

	while          reduce using rule 20
	if             reduce using rule 20
	width          reduce using rule 20
	height         reduce using rule 20
	print          reduce using rule 20
	'+'            shift, and enter state 33
			(reduce using rule 20)

	'-'            shift, and enter state 34
			(reduce using rule 20)



State 87

	Exp -> gibb int Exp Exp Exp .                       (rule 21)
	Exp -> Exp . lt Exp                                 (rule 24)
	Exp -> Exp . gt Exp                                 (rule 25)
	Exp -> Exp . eq Exp                                 (rule 26)
	Exp -> Exp . neq Exp                                (rule 27)
	Exp -> Exp . '+' Exp                                (rule 34)
	Exp -> Exp . '-' Exp                                (rule 35)

	repeat         reduce using rule 21
	joinH          reduce using rule 21
	joinV          reduce using rule 21
	int            reduce using rule 21
	var            reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	'{'            reduce using rule 21
	';'            reduce using rule 21
	not            reduce using rule 21
	rotate         reduce using rule 21
	scale          reduce using rule 21
	reflectX       reduce using rule 21
	reflectY       reduce using rule 21
	'_'            reduce using rule 21
	and            reduce using rule 21
	or             reduce using rule 21
	subtile        reduce using rule 21
	gibb           reduce using rule 21
	true           reduce using rule 21
	false          reduce using rule 21
	lt             shift, and enter state 29
			(reduce using rule 21)

	gt             shift, and enter state 30
			(reduce using rule 21)

	eq             shift, and enter state 31
			(reduce using rule 21)

	neq            shift, and enter state 32
			(reduce using rule 21)

	while          reduce using rule 21
	if             reduce using rule 21
	width          reduce using rule 21
	height         reduce using rule 21
	print          reduce using rule 21
	'+'            shift, and enter state 33
			(reduce using rule 21)

	'-'            shift, and enter state 34
			(reduce using rule 21)



State 88

	Exp -> while Exp '{' ExpSeq '}' .                   (rule 30)

	repeat         reduce using rule 30
	joinH          reduce using rule 30
	joinV          reduce using rule 30
	int            reduce using rule 30
	var            reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	'{'            reduce using rule 30
	';'            reduce using rule 30
	not            reduce using rule 30
	rotate         reduce using rule 30
	scale          reduce using rule 30
	reflectX       reduce using rule 30
	reflectY       reduce using rule 30
	'_'            reduce using rule 30
	and            reduce using rule 30
	or             reduce using rule 30
	subtile        reduce using rule 30
	gibb           reduce using rule 30
	true           reduce using rule 30
	false          reduce using rule 30
	lt             reduce using rule 30
	gt             reduce using rule 30
	eq             reduce using rule 30
	neq            reduce using rule 30
	while          reduce using rule 30
	if             reduce using rule 30
	width          reduce using rule 30
	height         reduce using rule 30
	print          reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30


State 89

	Exp -> if Exp '{' ExpSeq '}' .                      (rule 28)
	Exp -> if Exp '{' ExpSeq '}' . else '{' ExpSeq '}'    (rule 29)

	repeat         reduce using rule 28
	joinH          reduce using rule 28
	joinV          reduce using rule 28
	int            reduce using rule 28
	var            reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	'{'            reduce using rule 28
	';'            reduce using rule 28
	not            reduce using rule 28
	rotate         reduce using rule 28
	scale          reduce using rule 28
	reflectX       reduce using rule 28
	reflectY       reduce using rule 28
	'_'            reduce using rule 28
	and            reduce using rule 28
	or             reduce using rule 28
	subtile        reduce using rule 28
	gibb           reduce using rule 28
	true           reduce using rule 28
	false          reduce using rule 28
	lt             reduce using rule 28
	gt             reduce using rule 28
	eq             reduce using rule 28
	neq            reduce using rule 28
	while          reduce using rule 28
	if             reduce using rule 28
	else           shift, and enter state 90
	width          reduce using rule 28
	height         reduce using rule 28
	print          reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28


State 90

	Exp -> if Exp '{' ExpSeq '}' else . '{' ExpSeq '}'    (rule 29)

	'{'            shift, and enter state 91


State 91

	Exp -> if Exp '{' ExpSeq '}' else '{' . ExpSeq '}'    (rule 29)

	repeat         shift, and enter state 3
	joinH          shift, and enter state 4
	joinV          shift, and enter state 5
	int            shift, and enter state 6
	var            shift, and enter state 7
	'('            shift, and enter state 8
	not            shift, and enter state 9
	rotate         shift, and enter state 10
	scale          shift, and enter state 11
	reflectX       shift, and enter state 12
	reflectY       shift, and enter state 13
	'_'            shift, and enter state 14
	and            shift, and enter state 15
	or             shift, and enter state 16
	subtile        shift, and enter state 17
	gibb           shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	while          shift, and enter state 21
	if             shift, and enter state 22
	width          shift, and enter state 23
	height         shift, and enter state 24
	print          shift, and enter state 25

	ExpSeq         goto state 92
	Exp            goto state 27

State 92

	Exp -> if Exp '{' ExpSeq '}' else '{' ExpSeq . '}'    (rule 29)

	'}'            shift, and enter state 93


State 93

	Exp -> if Exp '{' ExpSeq '}' else '{' ExpSeq '}' .    (rule 29)

	repeat         reduce using rule 29
	joinH          reduce using rule 29
	joinV          reduce using rule 29
	int            reduce using rule 29
	var            reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	'{'            reduce using rule 29
	';'            reduce using rule 29
	not            reduce using rule 29
	rotate         reduce using rule 29
	scale          reduce using rule 29
	reflectX       reduce using rule 29
	reflectY       reduce using rule 29
	'_'            reduce using rule 29
	and            reduce using rule 29
	or             reduce using rule 29
	subtile        reduce using rule 29
	gibb           reduce using rule 29
	true           reduce using rule 29
	false          reduce using rule 29
	lt             reduce using rule 29
	gt             reduce using rule 29
	eq             reduce using rule 29
	neq            reduce using rule 29
	while          reduce using rule 29
	if             reduce using rule 29
	width          reduce using rule 29
	height         reduce using rule 29
	print          reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 36
Number of terminals: 37
Number of non-terminals: 3
Number of states: 94
